name: "üöÄ Deploy to Vercel"

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: "üì• Checkout code"
        uses: actions/checkout@v4

      - name: "üõ†Ô∏è Setup pnpm"
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: "üß∞ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: "üì¶ Install dependencies"
        run: pnpm install --no-frozen-lockfile

      - name: "üß™ Type check"
        run: pnpm run type-check

      - name: "üõ†Ô∏è Install Vercel CLI"
        run: pnpm add -g vercel@latest

      - name: "üßπ Check and delete existing matching Vercel projects"
        id: cleanup-projects
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          # Get repository name for pattern matching
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          REPO_PATTERN="${REPO_NAME}-"
          
          echo "========================================="
          echo "Cleaning up existing Vercel projects"
          echo "Pattern: ${REPO_PATTERN}*"
          echo "========================================="
          
          # List all Vercel projects
          PROJECTS=$(curl -s -X GET \
            "https://api.vercel.com/v9/projects" \
            -H "Authorization: Bearer ${VERCEL_TOKEN}" \
            -H "Content-Type: application/json")
          
          # Extract project names that match the pattern
          MATCHING_PROJECTS=$(echo "$PROJECTS" | jq -r ".projects[] | select(.name | startswith(\"${REPO_PATTERN}\")) | .name" || true)
          
          if [ -n "$MATCHING_PROJECTS" ]; then
            echo "Found matching Vercel projects to delete:"
            echo "$MATCHING_PROJECTS"
            echo ""
            
            # Delete each matching project with rate limiting
            while IFS= read -r PROJECT; do
              if [ -n "$PROJECT" ]; then
                echo "Deleting Vercel project: $PROJECT"
                DELETE_RESPONSE=$(curl -s -X DELETE \
                  "https://api.vercel.com/v9/projects/${PROJECT}" \
                  -H "Authorization: Bearer ${VERCEL_TOKEN}" \
                  -H "Content-Type: application/json")
                
                # Check if deletion was successful (Vercel API returns empty response on success)
                if [ -z "$DELETE_RESPONSE" ] || [ "$DELETE_RESPONSE" = "{}" ]; then
                  echo "‚úì Successfully deleted Vercel project: $PROJECT"
                else
                  echo "‚ö† Warning: Failed to delete Vercel project: $PROJECT"
                  echo "Response: $DELETE_RESPONSE"
                fi
                
                # Rate limiting - wait 1 second between deletions
                sleep 1
              fi
            done <<< "$MATCHING_PROJECTS"
          else
            echo "No existing Vercel projects found matching pattern: ${REPO_PATTERN}*"
          fi
          
          echo ""
          echo "========================================="
          echo "Cleanup complete"
          echo "========================================="

      - name: "üÜï Generate Vercel project name and create project"
        id: generate-vercel-project
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          # Get repository name
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          # Generate random alphanumeric string
          RANDOM_STRING=$(openssl rand -hex 8 | tr -d '\n')
          
          # Combine repository name with random string
          PROJECT_NAME="${REPO_NAME}-${RANDOM_STRING}"
          
          # Ensure minimum length of 26 characters
          while [ ${#PROJECT_NAME} -lt 26 ]; do
            EXTRA_CHARS=$(openssl rand -hex 2 | tr -d '\n')
            PROJECT_NAME="${PROJECT_NAME}${EXTRA_CHARS}"
          done
          
          # Ensure project name is valid (lowercase, alphanumeric, hyphens only)
          PROJECT_NAME=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
          
          echo "Generated project name: $PROJECT_NAME"
          
          # Create new Vercel project
          CREATE_RESPONSE=$(curl -s -X POST \
            "https://api.vercel.com/v9/projects" \
            -H "Authorization: Bearer ${VERCEL_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{
              \"name\": \"$PROJECT_NAME\",
              \"framework\": \"nextjs\"
            }")
          
          PROJECT_ID=$(echo "$CREATE_RESPONSE" | jq -r '.id')
          
          if [ "$PROJECT_ID" != "null" ] && [ -n "$PROJECT_ID" ]; then
            echo "‚úì Successfully created Vercel project: $PROJECT_NAME"
            echo "Project ID: $PROJECT_ID"
            echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
            echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
            
            # Link the project to current directory
            echo "üîó Linking Vercel project..."
            vercel link --token="$VERCEL_TOKEN" --yes --project="$PROJECT_ID"
          else
            echo "‚ùå Failed to create Vercel project"
            echo "Response: $CREATE_RESPONSE"
            exit 1
          fi

      - name: "‚è≥ Wait for Cloudflare Pages deployment"
        id: wait-cloudflare
        run: |
          echo "‚è≥ Waiting for Cloudflare Pages deployment to complete..."
          
          # Get the current workflow run ID that triggered this
          CURRENT_RUN_ID="${{ github.run_id }}"
          
          # Function to check workflow status
          check_workflow_status() {
            local run_id=$1
            local status=$(gh api repos/${{ github.repository }}/actions/runs/$run_id --jq '.status')
            local conclusion=$(gh api repos/${{ github.repository }}/actions/runs/$run_id --jq '.conclusion')
            echo "Run $run_id: status=$status, conclusion=$conclusion"
            
            if [[ "$status" == "completed" ]]; then
              if [[ "$conclusion" == "success" ]]; then
                return 0  # Success
              else
                return 2  # Failed
              fi
            else
              return 1  # Still running
            fi
          }
          
          # Find the Cloudflare Pages workflow run for this commit
          CLOUDFLARE_RUN_ID=$(gh api repos/${{ github.repository }}/actions/runs \
            --jq '.workflow_runs[] | select(.head_sha == "${{ github.sha }}" and .name == "Deploy to Cloudflare Pages") | .id' | head -1)
          
          if [[ -z "$CLOUDFLARE_RUN_ID" ]]; then
            echo "‚ùå Could not find Cloudflare Pages workflow run"
            exit 1
          fi
          
          echo "üìç Found Cloudflare Pages workflow run: $CLOUDFLARE_RUN_ID"
          
          # Poll every 10 seconds for up to 10 minutes
          MAX_ATTEMPTS=60
          ATTEMPT=0
          
          while [[ $ATTEMPT -lt $MAX_ATTEMPTS ]]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "üîç Check $ATTEMPT/$MAX_ATTEMPTS..."
            
            if check_workflow_status $CLOUDFLARE_RUN_ID; then
              echo "‚úÖ Cloudflare Pages deployment completed successfully!"
              
              # Get the worker name from the Cloudflare workflow step outputs
              echo "üîç Extracting worker name from Cloudflare workflow..."
              
              # Get job ID for the generate-worker-name step
              JOB_DATA=$(gh api repos/${{ github.repository }}/actions/runs/$CLOUDFLARE_RUN_ID/jobs --jq '.jobs[0]')
              JOB_ID=$(echo "$JOB_DATA" | jq -r '.id')
              
              # Extract worker name from step outputs
              WORKER_NAME=$(echo "$JOB_DATA" | jq -r '.steps[] | select(.name | contains("generate-worker-name")) | .outputs.worker_name // empty' 2>/dev/null || echo "")
              
              # Alternative: extract from job logs using the specific log pattern
              if [[ -z "$WORKER_NAME" ]]; then
                echo "üîç Extracting worker name from job logs..."
                WORKER_NAME=$(gh api repos/${{ github.repository }}/actions/jobs/$JOB_ID/logs \
                  | grep "Generated worker name:" | sed 's/.*Generated worker name: //' | tail -1 || echo "")
              fi
              
              # Another fallback: look for the GITHUB_OUTPUT pattern
              if [[ -z "$WORKER_NAME" ]]; then
                echo "üîç Looking for worker_name in GITHUB_OUTPUT..."
                WORKER_NAME=$(gh api repos/${{ github.repository }}/actions/jobs/$JOB_ID/logs \
                  | grep -o "worker_name=[a-z0-9-]*" | cut -d'=' -f2 | tail -1 || echo "")
              fi
              
              # Fail if worker name cannot be extracted from Cloudflare workflow
              if [[ -z "$WORKER_NAME" ]]; then
                echo "‚ùå Failed to extract worker name from Cloudflare workflow"
                echo "   Worker name is required for screenshot generation"
                exit 1
              fi
              
              echo "‚úÖ Worker name extracted: $WORKER_NAME"
              
              # Set the deployment URL with custom domain
              DEPLOYMENT_URL="https://${WORKER_NAME}.uratmangun.workers.dev"
              echo "üîó Cloudflare deployment URL: $DEPLOYMENT_URL"
              echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
              break
            else
              case $? in
                1)
                  echo "‚è≥ Cloudflare deployment still running..."
                  sleep 10
                  ;;
                2)
                  echo "‚ùå Cloudflare deployment failed!"
                  exit 1
                  ;;
              esac
            fi
          done
          
          if [[ $ATTEMPT -ge $MAX_ATTEMPTS ]]; then
            echo "‚è∞ Timeout waiting for Cloudflare deployment"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "üîë Generate Farcaster account association"
        env:
            NEXT_PUBLIC_APP_DOMAIN: ${{ steps.generate-vercel-project.outputs.project_name }}.vercel.app
            FARCASTER_FID: ${{ secrets.FARCASTER_FID }}
            FARCASTER_CUSTODY_ADDRESS: ${{ secrets.FARCASTER_CUSTODY_ADDRESS }}
            FARCASTER_CUSTODY_PRIVATE_KEY: ${{ secrets.FARCASTER_CUSTODY_PRIVATE_KEY }}
        run: |
            echo "üîß Generating Farcaster account association for domain: $NEXT_PUBLIC_APP_DOMAIN"
            node scripts/generate-farcaster-account-association.js generate
      - name: "üé® Generate AI icon"
        env:
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
        run: |
          echo "üé® Generating AI icon using Flux API"
          node scripts/generate-flux-icon.js

      - name: "üì∏ Generate screenshots"
        env:
          SCREENSHOT_URL: ${{ steps.wait-cloudflare.outputs.deployment_url }}
          NEXT_PUBLIC_APP_DOMAIN: ${{ steps.generate-vercel-project.outputs.project_name }}.vercel.app
          BROWSERLESS_API_URL: ${{ secrets.BROWSERLESS_API_URL }}
        run: |
          echo "üì∏ Generating screenshots from deployment: $NEXT_PUBLIC_APP_DOMAIN"
          node scripts/generate-screenshots.js

      - name: "üèóÔ∏è Build application"
        run: pnpm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          NODE_OPTIONS: "--max-old-space-size=4096"
          NEXT_PUBLIC_APP_DOMAIN: https://${{ steps.generate-vercel-project.outputs.project_name }}.vercel.app
          # Pass all Farcaster and API configuration for build-time generation
          FARCASTER_FID: ${{ secrets.FARCASTER_FID }}
          FARCASTER_CUSTODY_ADDRESS: ${{ secrets.FARCASTER_CUSTODY_ADDRESS }}
          FARCASTER_CUSTODY_PRIVATE_KEY: ${{ secrets.FARCASTER_CUSTODY_PRIVATE_KEY }}
          FARCASTER_APP_NAME: ${{ secrets.FARCASTER_APP_NAME }}
          FARCASTER_APP_BUTTON_TITLE: ${{ secrets.FARCASTER_APP_BUTTON_TITLE }}
          FARCASTER_APP_DESCRIPTION: ${{ secrets.FARCASTER_APP_DESCRIPTION }}
          FARCASTER_SPLASH_BACKGROUND_COLOR: ${{ secrets.FARCASTER_SPLASH_BACKGROUND_COLOR }}
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          FARCASTER_WEBHOOK_SECRET: ${{ secrets.FARCASTER_WEBHOOK_SECRET }}
          FLUX_GENERATION_DELAY: ${{ secrets.FLUX_GENERATION_DELAY }}

      - name: "üöÄ Deploy to Vercel (Production)"
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          # Farcaster Configuration
          FARCASTER_FID: ${{ secrets.FARCASTER_FID }}
          FARCASTER_CUSTODY_ADDRESS: ${{ secrets.FARCASTER_CUSTODY_ADDRESS }}
          FARCASTER_CUSTODY_PRIVATE_KEY: ${{ secrets.FARCASTER_CUSTODY_PRIVATE_KEY }}
          NEXT_PUBLIC_APP_DOMAIN: https://${{ steps.generate-vercel-project.outputs.project_name }}.vercel.app
          # App Metadata
          FARCASTER_APP_NAME: ${{ secrets.FARCASTER_APP_NAME }}
          FARCASTER_APP_BUTTON_TITLE: ${{ secrets.FARCASTER_APP_BUTTON_TITLE }}
          FARCASTER_APP_DESCRIPTION: ${{ secrets.FARCASTER_APP_DESCRIPTION }}
          FARCASTER_SPLASH_BACKGROUND_COLOR: ${{ secrets.FARCASTER_SPLASH_BACKGROUND_COLOR }}
          # API Keys
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          # Optional Configuration
          FARCASTER_WEBHOOK_SECRET: ${{ secrets.FARCASTER_WEBHOOK_SECRET }}
          FLUX_GENERATION_DELAY: ${{ secrets.FLUX_GENERATION_DELAY }}
        run: |
          echo "Deploying to Vercel Production..."
          vercel deploy --prod \
            --token="$VERCEL_TOKEN" \
            --yes \
            --build-env FARCASTER_FID="$FARCASTER_FID" \
            --build-env FARCASTER_CUSTODY_ADDRESS="$FARCASTER_CUSTODY_ADDRESS" \
            --build-env FARCASTER_CUSTODY_PRIVATE_KEY="$FARCASTER_CUSTODY_PRIVATE_KEY" \
            --build-env NEXT_PUBLIC_APP_DOMAIN="$NEXT_PUBLIC_APP_DOMAIN" \
            --build-env FARCASTER_APP_NAME="$FARCASTER_APP_NAME" \
            --build-env FARCASTER_APP_BUTTON_TITLE="$FARCASTER_APP_BUTTON_TITLE" \
            --build-env FARCASTER_APP_DESCRIPTION="$FARCASTER_APP_DESCRIPTION" \
            --build-env FARCASTER_SPLASH_BACKGROUND_COLOR="$FARCASTER_SPLASH_BACKGROUND_COLOR" \
            --build-env TOGETHER_API_KEY="$TOGETHER_API_KEY" \
            --build-env GEMINI_API_KEY="$GEMINI_API_KEY" \
            --build-env FARCASTER_WEBHOOK_SECRET="$FARCASTER_WEBHOOK_SECRET" \
            --build-env FLUX_GENERATION_DELAY="$FLUX_GENERATION_DELAY" \
            ./

      - name: "üè∑Ô∏è Update repository homepage URL"
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const projectName = '${{ steps.generate-vercel-project.outputs.project_name }}';
            const homepageUrl = `https://${projectName}.vercel.app`;
            
            console.log(`Updating repository homepage to: ${homepageUrl}`);
            
            try {
              await github.rest.repos.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                homepage: homepageUrl
              });
              console.log('Successfully updated repository homepage URL');
            } catch (error) {
              console.error('Failed to update repository homepage URL:', error);
              // Don't fail the workflow if homepage update fails
            }

      - name: "üîç Deploy to Vercel (Preview)"
        if: github.event_name == 'pull_request'
        id: deploy-preview
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          # Farcaster Configuration
          FARCASTER_FID: ${{ secrets.FARCASTER_FID }}
          FARCASTER_CUSTODY_ADDRESS: ${{ secrets.FARCASTER_CUSTODY_ADDRESS }}
          FARCASTER_CUSTODY_PRIVATE_KEY: ${{ secrets.FARCASTER_CUSTODY_PRIVATE_KEY }}
          NEXT_PUBLIC_APP_DOMAIN: https://${{ steps.generate-vercel-project.outputs.project_name }}.vercel.app
          # App Metadata
          FARCASTER_APP_NAME: ${{ secrets.FARCASTER_APP_NAME }}
          FARCASTER_APP_BUTTON_TITLE: ${{ secrets.FARCASTER_APP_BUTTON_TITLE }}
          FARCASTER_APP_DESCRIPTION: ${{ secrets.FARCASTER_APP_DESCRIPTION }}
          FARCASTER_SPLASH_BACKGROUND_COLOR: ${{ secrets.FARCASTER_SPLASH_BACKGROUND_COLOR }}
          # API Keys
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          # Optional Configuration
          FARCASTER_WEBHOOK_SECRET: ${{ secrets.FARCASTER_WEBHOOK_SECRET }}
          FLUX_GENERATION_DELAY: ${{ secrets.FLUX_GENERATION_DELAY }}
        run: |
          echo "Deploying to Vercel Preview..."
          DEPLOYMENT_URL=$(vercel deploy \
            --token="$VERCEL_TOKEN" \
            --yes \
            --build-env FARCASTER_FID="$FARCASTER_FID" \
            --build-env FARCASTER_CUSTODY_ADDRESS="$FARCASTER_CUSTODY_ADDRESS" \
            --build-env FARCASTER_CUSTODY_PRIVATE_KEY="$FARCASTER_CUSTODY_PRIVATE_KEY" \
            --build-env NEXT_PUBLIC_APP_DOMAIN="$NEXT_PUBLIC_APP_DOMAIN" \
            --build-env FARCASTER_APP_NAME="$FARCASTER_APP_NAME" \
            --build-env FARCASTER_APP_BUTTON_TITLE="$FARCASTER_APP_BUTTON_TITLE" \
            --build-env FARCASTER_APP_DESCRIPTION="$FARCASTER_APP_DESCRIPTION" \
            --build-env FARCASTER_SPLASH_BACKGROUND_COLOR="$FARCASTER_SPLASH_BACKGROUND_COLOR" \
            --build-env TOGETHER_API_KEY="$TOGETHER_API_KEY" \
            --build-env GEMINI_API_KEY="$GEMINI_API_KEY" \
            --build-env FARCASTER_WEBHOOK_SECRET="$FARCASTER_WEBHOOK_SECRET" \
            --build-env FLUX_GENERATION_DELAY="$FLUX_GENERATION_DELAY" \
            ./)
          
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: "üí¨ Comment deployment URL"
        if: github.event_name == 'pull_request' && steps.deploy-preview.outputs.deployment_url
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.deploy-preview.outputs.deployment_url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ Vercel preview deployment ready!\n\nüîó ${deploymentUrl}`
            })
